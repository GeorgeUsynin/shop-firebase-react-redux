{"version":3,"sources":["firebase.js","bll/productsReducer.ts","bll/cartReducer.ts","components/Header/Header.tsx","components/Products/Product/Product.tsx","components/Products/Products.tsx","components/Order.tsx","components/Cart/Cart.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx","components/Cart/Cart.module.css"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","firestore","getProducts","createAsyncThunk","_","thunkAPI","a","dispatch","setIsFetching","isFetching","collection","doc","get","then","data","slice","createSlice","name","initialState","electronics","totalPrice","totalProductsInCart","reducers","state","action","payload","setTotalPrice","price","localStorage","setItem","JSON","stringify","setTotalAmountOfProductsInCart","value","extraReducers","builder","addCase","fulfilled","actions","productsReducer","reducer","potentialPurchases","showOrder","setDeletePurchases","setPotentialPurchases","some","product","id","push","setAddQuantityOfPurchase","find","quantity","setSubQuantityOfPurchase","index","findIndex","splice","setShowOrder","cartReducer","Header","React","memo","useDispatch","useSelector","products","location","useLocation","AppBar","position","style","marginBottom","Toolbar","justifyContent","pathname","PATH","PRODUCTS","to","color","onClick","display","alignItems","padding","CART","borderRadius","border","fontSize","marginLeft","Product","props","model","description","brand","imgUrl","addProductHandler","showButton","src","alt","textAlign","Button","variant","Products","mapProducts","items","map","item","Grid","xs","sm","md","Paper","elevation","amount","potentialPurchase","Object","values","reduce","acc","filter","container","spacing","headphones","phones","monitors","Order","purchases","cart","initialValues","surname","address","phone","validate","errors","onSubmit","resetForm","purchase","customerData","console","log","clear","submitForm","touched","flexDirection","component","TextField","label","error","disabled","Cart","useEffect","length","direction","alignContent","fontWeight","className","cls","order","margin","width","height","App","totalAmountOfPurchases","getItem","parse","forEach","Container","CircularProgress","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3584441d.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/analytics'\r\nimport 'firebase/firestore'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: 'AIzaSyAyeMIqCDCcV7dYMhWl-mPgKxEU-cFb5RQ',\r\n    authDomain: 'shop-a10c2.firebaseapp.com',\r\n    databaseURL: 'https://shop-a10c2-default-rtdb.europe-west1.firebasedatabase.app',\r\n    projectId: 'shop-a10c2',\r\n    storageBucket: 'shop-a10c2.appspot.com',\r\n    messagingSenderId: '169944780170',\r\n    appId: '1:169944780170:web:6871faa9413ce774044c73',\r\n    measurementId: 'G-96WHHNW2GJ'\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nconst db = firebase.firestore()\r\n\r\nexport {db}\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {db} from '../firebase'\r\n\r\nexport type ProductType = {\r\n    id: number\r\n    brand: string\r\n    model: string\r\n    description: string\r\n    price: number\r\n    imgUrl: string\r\n    quantity: number\r\n}\r\n\r\nexport type ProductsType = {\r\n    headphones: Array<ProductType>\r\n    monitors: Array<ProductType>\r\n    phones: Array<ProductType>\r\n}\r\n\r\ntype InitialStateType = {\r\n    electronics: ProductsType | null\r\n    isFetching: boolean\r\n    totalPrice: number\r\n    totalProductsInCart: number\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    electronics: null,\r\n    isFetching: false,\r\n    totalPrice: 0,\r\n    totalProductsInCart: 0\r\n}\r\n\r\nexport const getProducts = createAsyncThunk('products/setProducts', async (_, thunkAPI) => {\r\n    thunkAPI.dispatch(setIsFetching({isFetching: true}))\r\n    return await db.collection('products').doc('electronics').get().then(doc => doc.data() as ProductsType)\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'products',\r\n    initialState,\r\n    reducers: {\r\n        setIsFetching(state, action: PayloadAction<{ isFetching: boolean }>) {\r\n            state.isFetching = action.payload.isFetching\r\n        },\r\n        setTotalPrice(state, action: PayloadAction<{ price: number }>) {\r\n            if (action.payload.price === 0){\r\n                state.totalPrice = 0\r\n            }\r\n            state.totalPrice += action.payload.price\r\n            localStorage.setItem(\"totalPrice\", JSON.stringify(state.totalPrice))\r\n        },\r\n        setTotalAmountOfProductsInCart(state, action: PayloadAction<{ value: number }>) {\r\n            if (action.payload.value === 0){\r\n                state.totalProductsInCart = 0\r\n            }\r\n            state.totalProductsInCart += action.payload.value\r\n            localStorage.setItem(\"totalQuantity\", JSON.stringify(state.totalProductsInCart))\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(getProducts.fulfilled, (state, action) => {\r\n            state.electronics = action.payload\r\n            state.isFetching = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setIsFetching, setTotalPrice, setTotalAmountOfProductsInCart} = slice.actions\r\n\r\nexport const productsReducer = slice.reducer\r\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {ProductType} from './productsReducer';\r\n\r\ntype InitialStateType = {\r\n    potentialPurchases: Array<ProductType>\r\n    showOrder: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    potentialPurchases: [],\r\n    showOrder: true\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        setDeletePurchases(state) {\r\n            state.potentialPurchases = []\r\n        },\r\n        setPotentialPurchases(state, action: PayloadAction<ProductType>) {\r\n            if (state.potentialPurchases.some(product => product.id === action.payload.id)) {\r\n                return\r\n            } else {\r\n                state.potentialPurchases.push(action.payload)\r\n            }\r\n        },\r\n        setAddQuantityOfPurchase(state, action: PayloadAction<{ id: number }>) {\r\n            let product = state.potentialPurchases.find(product => product.id === action.payload.id)\r\n            if (product)\r\n                product.quantity++\r\n            localStorage.setItem(\"purchases\", JSON.stringify(state.potentialPurchases))\r\n        },\r\n        setSubQuantityOfPurchase(state, action: PayloadAction<{ id: number }>) {\r\n            let product = state.potentialPurchases.find(product => product.id === action.payload.id)\r\n            if (product) {\r\n                product.quantity--\r\n                if (product.quantity === 0) {\r\n                    let index = state.potentialPurchases.findIndex(product => product.id === action.payload.id)\r\n                    state.potentialPurchases.splice(index, 1)\r\n                }\r\n            }\r\n            localStorage.setItem(\"purchases\", JSON.stringify(state.potentialPurchases))\r\n        },\r\n        setShowOrder(state, action: PayloadAction<boolean>) {\r\n            state.showOrder = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const {setPotentialPurchases, setAddQuantityOfPurchase, setSubQuantityOfPurchase, setShowOrder, setDeletePurchases} = slice.actions\r\n\r\nexport const cartReducer = slice.reducer\r\n","import React from 'react';\r\nimport {AppBar, Toolbar} from '@material-ui/core';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {NavLink, useLocation} from 'react-router-dom';\r\nimport {PATH} from '../../App';\r\nimport {setShowOrder} from '../../bll/cartReducer';\r\n\r\nexport const Header = React.memo(() => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const totalPrice = useSelector<AppRootStateType, number>(state => state.products.totalPrice)\r\n    const totalProductsInCart = useSelector<AppRootStateType, number>(state => state.products.totalProductsInCart)\r\n\r\n    const location = useLocation()\r\n\r\n    return (\r\n        <AppBar position=\"sticky\" style={{marginBottom: '24px'}}>\r\n            <Toolbar style={{justifyContent: 'space-between'}}>\r\n                <div>\r\n                    {location.pathname !== PATH.PRODUCTS &&\r\n                    <NavLink to={PATH.PRODUCTS} style={{color: 'white'}} onClick={()=>dispatch(setShowOrder(true))}><ArrowBackIcon/></NavLink>}\r\n                </div>\r\n                <div style={{display: 'flex', alignItems: 'center'}}>\r\n                    {totalPrice !== 0 && <p style={{padding: '0 5px'}}>{totalPrice} $</p>}\r\n                    <NavLink to={PATH.CART} style={{color: 'white'}}><ShoppingCartIcon/></NavLink>\r\n                    {totalProductsInCart !== 0 && <div style={{\r\n                        borderRadius: '50%',\r\n                        border: 'solid white 1px',\r\n                        padding: '1px 5px',\r\n                        fontSize: '10px',\r\n                        marginLeft: '5px'\r\n                    }}>{totalProductsInCart}</div>}\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport {Button} from '@material-ui/core';\r\n\r\ntype ProductType = {\r\n    id: number\r\n    brand: string\r\n    model: string\r\n    description: string\r\n    price: number\r\n    imgUrl: string\r\n    quantity?:number\r\n    showButton: boolean\r\n    addProductHandler?: (price: number, amount: number, id: number) => void\r\n}\r\n\r\nexport const Product: React.FC<ProductType> = React.memo((props) => {\r\n\r\n    const {model, description, price, brand, imgUrl, addProductHandler, id, showButton} = props\r\n\r\n    const addHandler = () => {\r\n        if (addProductHandler)\r\n            addProductHandler(price, 1, id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <img src={imgUrl} alt=\"\"/>\r\n            <p>{brand} {model}</p>\r\n            <p style={{textAlign: 'left'}}>{description}</p>\r\n            <p><b>{price} $</b></p>\r\n            {showButton && <div>\r\n                <Button variant=\"contained\" color=\"primary\"\r\n                        onClick={addHandler}\r\n                >\r\n                    Add to cart\r\n                </Button>\r\n            </div>}\r\n        </>\r\n    )\r\n})","import React from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {\r\n    ProductsType,\r\n    ProductType,\r\n    setTotalAmountOfProductsInCart,\r\n    setTotalPrice\r\n} from '../../bll/productsReducer';\r\nimport {Product} from './Product/Product';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {setAddQuantityOfPurchase, setPotentialPurchases} from '../../bll/cartReducer';\r\n\r\nexport const Products = React.memo(() => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        let electronics = useSelector<AppRootStateType, ProductsType | null>(state => state.products.electronics)\r\n\r\n        const mapProducts = (items: Array<ProductType>) => {\r\n\r\n            return items.map(((item) => {\r\n\r\n                const addProductHandler = (price: number, amount: number, id: number) => {\r\n                    dispatch(setTotalPrice({price}))\r\n                    dispatch(setTotalAmountOfProductsInCart({value: amount}))\r\n                    if (electronics) {\r\n                        let products = Object.values(electronics).reduce((acc, item) => {\r\n                            return [...acc, ...item]\r\n                        }, [])\r\n                        let potentialPurchase = products.filter(item => item.id === id)\r\n                        dispatch(setPotentialPurchases(potentialPurchase[0]))\r\n                    }\r\n                    dispatch(setAddQuantityOfPurchase({id}))\r\n                }\r\n\r\n                return (\r\n                    <Grid item xs={12} sm={6} md={4} key={item.id}>\r\n                        <Paper elevation={3} style={{padding: '20px'}}>\r\n                            <Product id={item.id} brand={item.brand} model={item.model}\r\n                                     description={item.description}\r\n                                     price={item.price} imgUrl={item.imgUrl} addProductHandler={addProductHandler}\r\n                                     showButton={true}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                )\r\n            }))\r\n        }\r\n\r\n        return (\r\n            <Grid container spacing={6}>\r\n                {\r\n                    electronics && mapProducts(electronics.headphones)\r\n                }\r\n                {\r\n                    electronics && mapProducts(electronics.phones)\r\n                }\r\n                {\r\n                    electronics && mapProducts(electronics.monitors)\r\n                }\r\n            </Grid>\r\n        )\r\n    }\r\n)\r\n","import React from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport {TextField} from 'formik-material-ui';\r\nimport {Field, Form, Formik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../bll/store';\r\nimport {ProductType, setTotalAmountOfProductsInCart, setTotalPrice} from '../bll/productsReducer';\r\nimport {setShowOrder} from '../bll/cartReducer';\r\n\r\ntype Values = {\r\n    name: string\r\n    surname: string\r\n    address: string\r\n    phone: string\r\n}\r\n\r\nexport const Order = React.memo(() => {\r\n\r\n        const purchases = useSelector<AppRootStateType, Array<ProductType>>(state => state.cart.potentialPurchases)\r\n        const totalPrice = useSelector<AppRootStateType, number>(state => state.products.totalPrice)\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        return (\r\n            <Formik\r\n                initialValues={{\r\n                    name: '',\r\n                    surname: '',\r\n                    address: '',\r\n                    phone: ''\r\n                }}\r\n                validate={values => {\r\n                    const errors: Partial<Values> = {};\r\n                    if (!values.name) {\r\n                        errors.name = 'Required';\r\n                    } else if (!values.surname) {\r\n                        errors.surname = 'Required';\r\n                    } else if (!values.address) {\r\n                        errors.address = 'Required';\r\n                    } else if (!values.phone) {\r\n                        errors.phone = 'Required';\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, {resetForm}) => {\r\n                    let purchasesForJSON = purchases.map(purchase => {\r\n                        return {\r\n                            id: purchase.id,\r\n                            brand: purchase.brand,\r\n                            model: purchase.model,\r\n                            quantity: purchase.quantity,\r\n                            price: purchase.price\r\n                        }\r\n                    })\r\n                    let data = {\r\n                        purchases: purchasesForJSON,\r\n                        customerData: values,\r\n                        totalPrice\r\n                    }\r\n                    console.log(JSON.stringify(data))\r\n                    dispatch(setTotalAmountOfProductsInCart({value: 0}))\r\n                    dispatch(setTotalPrice({price: 0}))\r\n                    dispatch(setShowOrder(false))\r\n                    // dispatch(setDeletePurchases())\r\n                    localStorage.clear()\r\n                    resetForm()\r\n                }}\r\n            >\r\n                {({submitForm, errors, values, touched}) => (\r\n                    <Form style={{display: 'flex', flexDirection: 'column'}}>\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"name\"\r\n                            label=\"Name\"\r\n                            variant=\"outlined\"\r\n                            error={touched.name && errors.name}\r\n                        />\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"surname\"\r\n                            label=\"Surname\"\r\n                            variant=\"outlined\"\r\n                            error={touched.surname && errors.surname}\r\n                        />\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"address\"\r\n                            label=\"Address\"\r\n                            variant=\"outlined\"\r\n                            error={touched.address && errors.address}\r\n                        />\r\n                        <Field\r\n                            component={TextField}\r\n                            name=\"phone\"\r\n                            label=\"Phone\"\r\n                            variant=\"outlined\"\r\n                            error={touched.phone && errors.phone}\r\n                        />\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={submitForm}\r\n                            disabled={Object.values(errors).some(error => error === 'Required') || values.name === ''}\r\n                        >\r\n                            Order\r\n                        </Button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n)\r\n","import React, {useEffect} from 'react';\r\nimport {Button, Grid, Paper} from '@material-ui/core';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../bll/store';\r\nimport {ProductType, setTotalAmountOfProductsInCart, setTotalPrice} from '../../bll/productsReducer';\r\nimport {Product} from '../Products/Product/Product';\r\nimport {setAddQuantityOfPurchase, setDeletePurchases, setSubQuantityOfPurchase} from '../../bll/cartReducer';\r\nimport RemoveShoppingCartIcon from '@material-ui/icons/RemoveShoppingCart';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport {Order} from '../Order';\r\nimport cls from './Cart.module.css'\r\n\r\nexport const Cart = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let potentialPurchases = useSelector<AppRootStateType, Array<ProductType>>(state => state.cart.potentialPurchases)\r\n    let totalPrice = useSelector<AppRootStateType, number>(state => state.products.totalPrice)\r\n    const showOrder = useSelector<AppRootStateType, boolean>(state => state.cart.showOrder)\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if (!showOrder) {\r\n                dispatch(setDeletePurchases())\r\n            }\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {showOrder\r\n                ?\r\n                <Grid container spacing={6}>\r\n                    {potentialPurchases.length !== 0 &&\r\n                    <>\r\n                        <Grid container item xs={8} sm={8} md={8} direction={'column'}>\r\n                            {potentialPurchases.map(purchase => {\r\n\r\n                                const addPurchaseHandler = () => {\r\n                                    dispatch(setAddQuantityOfPurchase({id: purchase.id}))\r\n                                    dispatch(setTotalPrice({price: purchase.price}))\r\n                                    dispatch(setTotalAmountOfProductsInCart({value: 1}))\r\n                                }\r\n\r\n                                const subPurchaseHandler = () => {\r\n                                    dispatch(setSubQuantityOfPurchase({id: purchase.id}))\r\n                                    dispatch(setTotalPrice({price: -purchase.price}))\r\n                                    dispatch(setTotalAmountOfProductsInCart({value: -1}))\r\n                                }\r\n\r\n                                return (\r\n                                    <div key={purchase.id}>\r\n                                        {!!purchase.quantity &&\r\n                                        <Paper elevation={3} style={{padding: '20px', marginBottom: '20px'}}>\r\n                                            <Grid container direction={'column'} style={{alignContent: 'center'}}>\r\n                                                <Grid item>\r\n                                                    <Product brand={purchase.brand}\r\n                                                             model={purchase.model}\r\n                                                             description={purchase.description}\r\n                                                             price={purchase.price}\r\n                                                             imgUrl={purchase.imgUrl}\r\n                                                             id={purchase.id}\r\n                                                             showButton={false}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item>\r\n                                                    <Button\r\n                                                        variant=\"contained\"\r\n                                                        color=\"primary\"\r\n                                                        onClick={subPurchaseHandler}\r\n                                                    >\r\n                                                        -\r\n                                                    </Button>\r\n                                                    <span\r\n                                                        style={{\r\n                                                            fontSize: '18px',\r\n                                                            fontWeight: 'bold',\r\n                                                            padding: '0 10px'\r\n                                                        }}>{` ${purchase.quantity} `}</span>\r\n                                                    <Button\r\n                                                        variant=\"contained\"\r\n                                                        color=\"primary\"\r\n                                                        onClick={addPurchaseHandler}\r\n                                                    >\r\n                                                        +\r\n                                                    </Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Paper>}\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </Grid>\r\n                        <Grid className={cls.order} container item xs={4} sm={4} md={4} direction={'column'}>\r\n                            <Order/>\r\n                            <h4>Total price: <em>{totalPrice} $</em></h4>\r\n                        </Grid>\r\n                    </>\r\n                    }\r\n                    {potentialPurchases.length === 0 && <div style={{margin: '30px auto'}}>\r\n                        <RemoveShoppingCartIcon style={{width: '100px',height: '100px'}}/>\r\n                        <h1 style={{width: '100%'}}>Your cart is empty. Please choose something to buy</h1>\r\n                    </div>\r\n                    }\r\n                </Grid>\r\n                :\r\n                <div>\r\n                    <CheckCircleIcon style={{width: '100px',height: '100px'}}/>\r\n                    <h1>Your order is being processed</h1>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {CircularProgress, Container} from '@material-ui/core';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getProducts, ProductType, setTotalAmountOfProductsInCart, setTotalPrice} from './bll/productsReducer';\nimport {Header} from './components/Header/Header';\nimport {AppRootStateType} from './bll/store';\nimport {Redirect, Route} from 'react-router-dom';\nimport {Products} from './components/Products/Products';\nimport {Cart} from './components/Cart/Cart';\nimport {setPotentialPurchases} from './bll/cartReducer';\n\nexport const PATH = {\n    PRODUCTS: '/products',\n    CART: '/cart',\n}\n\nfunction App() {\n\n    const dispatch = useDispatch()\n\n    const isFetching = useSelector<AppRootStateType, boolean>(state => state.products.isFetching)\n    let potentialPurchases = useSelector<AppRootStateType, Array<ProductType>>(state => state.cart.potentialPurchases)\n    let totalPrice = useSelector<AppRootStateType, number>(state => state.products.totalPrice)\n    let totalAmountOfPurchases = useSelector<AppRootStateType, number>(state => state.products.totalProductsInCart)\n\n    if (potentialPurchases.length === 0) {\n        if (localStorage.getItem('purchases')) {\n            potentialPurchases = JSON.parse(localStorage.getItem('purchases') as string)\n            potentialPurchases.forEach(purchase => dispatch(setPotentialPurchases(purchase)))\n            totalPrice = JSON.parse(localStorage.getItem('totalPrice') as string)\n            dispatch(setTotalPrice({price: totalPrice}))\n            totalAmountOfPurchases = JSON.parse(localStorage.getItem('totalQuantity') as string)\n            dispatch(setTotalAmountOfProductsInCart({value: totalAmountOfPurchases}))\n        }\n\n    }\n\n    useEffect(() => {\n        dispatch(getProducts())\n    }, [dispatch])\n\n    return (\n        <div className=\"App\">\n            <Container>\n                <Header/>\n                {\n                    isFetching\n                        ?\n                        <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh'}}>\n                            <CircularProgress/>\n                        </div>\n                        :\n                        <>\n                            <Route exact path={'/'} render={() => <Redirect to={PATH.PRODUCTS}/>}/>\n                            <Route path={'/products'} render={() => <Products/>}/>\n                            <Route path={'/cart'} render={() => <Cart/>}/>\n                        </>\n                }\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, configureStore} from '@reduxjs/toolkit';\r\nimport {productsReducer} from './productsReducer';\r\nimport {cartReducer} from './cartReducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    products: productsReducer,\r\n    cart: cartReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppDispatchType = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './bll/store';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"order\":\"Cart_order__hFp2_\"};"],"sourceRoot":""}